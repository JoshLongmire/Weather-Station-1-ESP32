---
alwaysApply: true
description: Power model, timing windows, ISR safety, and cadence rules for ESP32 Weather Station v18
---

## Power Model, Timing, and ISR Rules

Reference files:
- Main sketch: [WaetherStation08_24_25_v18.ino](mdc:WaetherStation08_24_25_v18.ino/WaetherStation08_24_25_v18.ino.ino)
- API docs: [docs/API.md](mdc:docs/API.md)

### Modes and Windows
- **Two modes:** `MODE_DAY` (stay awake, periodic logging) and `MODE_NIGHT` (short serve window → deep sleep)
- **Serve windows:**
  - Cold boot/undefined wake: `UPTIME_STARTUP` (1800s = 30 min), then a fixed `UPTIME_CONFIG` (120s = 2 min) decision run
  - RTC/TIMER wakes: `UPTIME_CONFIG` (120s = 2 min)
- **Enter sleep only via `prepareDeepSleep(seconds)`** which:
  - Programs DS3231 RTC A1 alarm (minute match) when RTC is OK
  - Always enables ESP32 timer wake (with 5s slack)
  - Sends SDS011 to sleep if present and awake
  - Turns LED off before calling `esp_deep_sleep_start()`

### Day/Night Decisioning
- **Light-based with hysteresis and dwell** using VEML7700:
  - Enter DAY: average lux ≥ `LUX_ENTER_DAY` (default: 1600, configurable) sustained for `DWELL_MS` (30s)
  - Exit DAY: average lux ≤ `LUX_EXIT_DAY` (default: 1400, configurable) sustained for `DWELL_MS` (30s)
- **Sampling cadence:** `SAMPLE_INTERVAL_MS` (2s); maintains rolling average buffer of 15 samples (`LUX_BUF_SIZE`)
- **During initial 30-minute window:** Sample lux but do not transition modes; decisions resume after window expires
- **On sunset (DAY → NIGHT):** Perform final `performLogging()` then call `prepareDeepSleep()` (never returns)
- **New work:** Must not introduce blocking delays; piggyback on existing sampling at `SAMPLE_INTERVAL_MS`

### ISR and Shared State
- **ISRs must be:**
  - Short (< 10µs typical)
  - In IRAM (`IRAM_ATTR`)
  - Free of heap allocation, `Serial`, or long math
  - Protected by critical sections when accessing shared state

#### Active ISRs:
1. **`rainIsr()` — Rain gauge tipping bucket**
   - Pin: GPIO18 (FALLING edge)
   - Debounce: `rainDebounceMsRuntime` (default: 150ms, configurable via `rain_debounce_ms`)
   - Increments `rainTipCount` and stores timestamp in 128-entry ring buffer
   - Critical section: `portENTER_CRITICAL_ISR(&rainMux)` / `portEXIT_CRITICAL_ISR(&rainMux)`
   - Rate computation: Copy timestamps under `portENTER_CRITICAL(&rainMux)` in task, then process

2. **`windIsr()` — Hall anemometer pulses**
   - Pin: GPIO7 (FALLING edge)
   - Debounce: `WIND_DEBOUNCE_MS` (5ms)
   - Stores timestamp in 128-entry ring buffer
   - Critical section: `portENTER_CRITICAL_ISR(&windMux)` / `portEXIT_CRITICAL_ISR(&windMux)`
   - Speed computation: Copy timestamps under `portENTER_CRITICAL(&windMux)` in task, then process
   - Calibration constants: `WIND_MPH_PER_HZ = 1.52870388047`, geometry: PPR=2, CUP_FACTOR=3

### Logging Cadence and SD I/O
- **All periodic SD writes flow through `performLogging()`** and respect `LOG_INTERVAL_MS` scheduling (default: 600000ms = 10 min, configurable via `log_interval_min`)
- **Scheduling:** `nextLogMillis` tracks next log time; only log when `(long)(now - nextLogMillis) >= 0`
- **SDS011 pre-log wake:** In DAY mode, wake SDS011 within configured preset window before log:
  - `off` — Keep asleep
  - `pre1` — Wake 1 minute before log
  - `pre2` — Wake 2 minutes before log (default)
  - `pre5` — Wake 5 minutes before log
  - `cont` — Always awake while in DAY mode
- **CSV format:** Keep SD writes compact; avoid large `String` concatenations in tight loops; always `close()` files after write
- **On sleep boundaries:** Perform a final `performLogging()` before calling `prepareDeepSleep()` (sunset or end of serve window)

### Timekeeping and RTC
- **Prefer DS3231 when present:** Expose `rtc_ok` flag and store `lastAlarmUnix` in `RTC_DATA_ATTR`
- **Daily NTP resync:** Around 02:00 local time with drift check; adjust RTC when `|delta| > 5s`
- **Timezone:** Configured via `configTzTime("EST5EDT,M3.2.0/2,M11.1.0/2", "pool.ntp.org")` in `setup()`
- **Time format:** Respect user `time_12h` preference when formatting timestamps for UI/CSV
- **RTC alarm programming:** `prepareDeepSleep()` computes `DateTime alarmT = now + TimeSpan(0, 0, wakeAfterSeconds / 60, 0)` and sets A1 alarm to minute match

### LED and UX
- **`updateStatusLed()` — Unified LED behavior:**
  - **Highest precedence:** Non-blocking pulse override (scheduled by `blinkStatus()`)
  - **AP mode:** Solid ON
  - **MODE_DAY connected:** Slow blink (500ms)
  - **MODE_DAY disconnected:** LED OFF (calm)
  - **MODE_NIGHT connected:** Slow blink (500ms)
  - **MODE_NIGHT disconnected:** LED OFF (calm)
- **`blinkStatus(times, durationMs)`** — Schedules non-blocking pulse sequence:
  - Sets `ledPulseActive = true`
  - `ledPulseRemainingToggles = times * 2` (on+off per cycle)
  - Handled by `updateStatusLed()` without blocking `loop()`
- **Avoid `delay()` in `loop()` for LED animation**

### Additional Periodic Tasks in loop()
1. **SDS011 UART frame parsing** (when `ENABLE_SDS011=1`):
   - Read available bytes from Serial2 (9600 baud)
   - Parse 10-byte frames (0xAA 0xC0 ... 0xAB)
   - Accumulate raw PM values while awake and warmed for averaging
   - Auto-sleep enforcement: `sdsAutoSleepAtMs` deadline in 2-minute serve window

2. **Wind 1-hour rolling average** (when `ENABLE_WIND=1`):
   - Sample once per minute: `if (now - windAvg1hLastSampleMs >= 60000UL)`
   - Compute instantaneous wind speed from last 1.5s of pulses
   - Update 60-entry circular buffer and running sum
   - Exposed as `wind_avg_mph_1h` in `/live`

3. **Leaf wetness sampling** (when `ENABLE_LEAF=1`):
   - Sample analog pin every `LEAF_READ_MS` (1s): `if (now - leafLastReadMs >= LEAF_READ_MS)`
   - Apply EMA smoothing with `LEAF_EMA_ALPHA = 0.20`
   - Map raw ADC (0-4095) to % using `LEAF_ADC_DRY` and `LEAF_ADC_WET` calibration points
   - Apply hysteresis: wet ON at ≥55%, OFF at ≤45%
   - Accumulate wet minutes: `if (now >= nextWetTickMs)` increment `wetMinutesToday` when `leafWet=true`
   - Daily rollover at local midnight using `tm_yday`

4. **Daily NTP resync** (at ~02:00 local):
   - `if (lt.tm_hour == 2 && (tnow - lastSync) > 20 * 3600)`
   - Call `configTzTime()` to sync NTP
   - Check RTC drift; adjust if `|delta| > 5s`

5. **AP-stuck fallback reset**:
   - Track `apResetTimer` when in AP mode
   - If stuck in AP for ≥180s, call `ESP.restart()`

### Extensions
- **When adding periodic tasks:**
  - Integrate via existing `loop()` cadence and guards
  - Avoid adding new timers or deep nesting
  - Use millisecond scheduling: `if (now - lastCheckMs >= INTERVAL_MS)`
- **If adding new peripherals:**
  - Gate with feature flags (`#define ENABLE_<FEATURE>`)
  - Expose boolean health field in `/live` (e.g., `new_sensor_ok`)
  - Degrade gracefully when absent

### RTC Memory Persistence (RTC_DATA_ATTR)
Data persisted across deep sleep cycles:
- `bootCount` — Cumulative boot/wake counter
- `lastAlarmUnix` — Last scheduled RTC alarm time (unix seconds)
- `lastSdLogUnix` — Last successful SD log timestamp (unix seconds)
- `rainTodayTips`, `rainTodayYday`, `rainEventTips`, `lastTipUnixPersist`, `rainProcessedTips` — Rain accumulation state
- `pressureHourly_hPa[13]`, `pressureHourlyUnix[13]`, `pressureHourlyCount`, `pressureHourlyHead` — Pressure history for trend
- `sdsLastPm25_ugm3`, `sdsLastPm10_ugm3`, `sdsLastPmUnix` — Last SDS011 PM readings (fallback during brief serve windows)
- `wetRing[1440]`, `wetRingHead`, `wetRingCount`, `wetMinutesToday`, `wetTodayYday` — Leaf wetness 24-hour accumulation
- `etoDailyMm`, `etoDailyYday`, `etoLastHourlyMm`, `etoTminToday`, `etoTmaxToday` — ETo accumulation and Tmin/Tmax for Hargreaves fallback

### Sleep Behavior Summary
- **MODE_DAY:** Device stays awake indefinitely; performs periodic logging every `LOG_INTERVAL_MS`
- **MODE_NIGHT:** Device wakes for `UPTIME_CONFIG` (2 min), serves HTTP, performs one log, then sleeps for `DEEP_SLEEP_SECONDS` (configurable via `sleep_minutes`)
- **Initial boot:** 30-minute config window → 2-minute decision run → enters normal DAY/NIGHT cycling based on light level
- **Sunset transition:** When DAY → NIGHT (lux drops below threshold for 30s), perform final log and immediately enter deep sleep
- **Wake sources:**
  - EXT0: DS3231 RTC A1 alarm (INT pin GPIO2 goes LOW when alarm fires)
  - TIMER: ESP32 timer wake (always enabled as safety fallback with 5s slack)
